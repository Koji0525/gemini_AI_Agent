#!/usr/bin/env python3
"""
ウズベキスタンM&Aポータルサイト設計タスク実行
"""
import asyncio
import os
from browser_control.browser_controller import BrowserController

async def run_uzbekistan_ma_task():
    print("\n" + "="*70)
    print("🎯 ウズベキスタンM&Aポータル - サイト設計タスク")
    print("="*70)
    
    async with BrowserController(download_folder="./downloads") as browser:
        # ステップ1: Geminiにアクセス
        print("\n[1/5] Geminiにアクセス中...")
        logged_in = await browser.navigate_to_gemini()
        
        if not logged_in:
            print("\n❌ ログインが必要です")
            print("💡 VNCで手動ログイン後、再実行してください")
            print("   http://localhost:6080/vnc.html")
            return False
        
        print("✅ Geminiログイン済み")
        
        # ステップ2: プロンプト準備
        print("\n[2/5] プロンプト準備中...")
        
        prompt = """Create a comprehensive site structure for an Uzbekistan M&A Portal website.

**Requirements:**
1. Main Pages (7-10 pages)
   - Home page with key features
   - M&A Listings page
   - Company Profiles
   - Resources/Knowledge Base
   - About Us
   - Contact

2. Key Features to include:
   - Search and filter M&A opportunities
   - Company matching system
   - Document repository
   - Due diligence tools
   - Communication platform

3. Target Audience:
   - Uzbekistan business owners
   - International investors
   - M&A advisors
   - Legal/financial professionals

4. Technical Considerations:
   - Bilingual (English/Uzbek)
   - Mobile-responsive design
   - Secure document handling

Please provide:
- Page structure with navigation hierarchy
- Key features for each page
- User flow recommendations
- Content priorities

Keep the response organized and under 1000 words."""

        print(f"✅ プロンプト準備完了（{len(prompt)} 文字）")
        
        # ステップ3: プロンプト送信
        print("\n[3/5] Geminiにプロンプト送信中...")
        print(f"📝 {prompt[:100]}...")
        
        try:
            await browser.send_prompt(prompt)
            print("✅ プロンプト送信成功")
        except Exception as e:
            print(f"❌ プロンプト送信エラー: {e}")
            return False
        
        # ステップ4: レスポンス待機
        print("\n[4/5] レスポンス生成待機中...")
        print("⏳ 最大60秒待機します...")
        
        try:
            await browser.wait_for_text_generation(max_wait=60)
            print("✅ レスポンス生成完了")
        except Exception as e:
            print(f"⚠️  待機エラー: {e}")
            print("💡 レスポンス取得を試みます...")
        
        # ステップ5: レスポンス取得
        print("\n[5/5] レスポンス取得中...")
        
        try:
            response = await browser.extract_latest_text_response()
            
            if response and len(response) > 100:
                print("\n" + "="*70)
                print("📝 生成結果")
                print("="*70)
                print(f"文字数: {len(response)} 文字")
                print(f"単語数: {len(response.split())} 語")
                print("="*70)
                print("\n【プレビュー（最初の500文字）】")
                print(response[:500] + "...")
                print("\n" + "="*70)
                
                # 保存
                os.makedirs("agent_outputs/design", exist_ok=True)
                output_file = "agent_outputs/design/uzbekistan_ma_portal_structure.md"
                
                with open(output_file, "w", encoding="utf-8") as f:
                    f.write(f"# Uzbekistan M&A Portal - Site Structure Design\n\n")
                    f.write(f"**Generated by**: Gemini AI\n")
                    f.write(f"**Task**: Site Structure Design\n")
                    f.write(f"**Date**: {os.popen('date').read().strip()}\n\n")
                    f.write("---\n\n")
                    f.write(response)
                
                print(f"\n💾 結果を保存しました: {output_file}")
                print("\n✅✅✅ タスク実行成功！")
                return True
            else:
                print(f"\n⚠️  レスポンスが短すぎます（{len(response) if response else 0} 文字）")
                print("💡 VNCで画面を確認してください")
                return False
                
        except Exception as e:
            print(f"❌ レスポンス取得エラー: {e}")
            return False

if __name__ == "__main__":
    print("\n🚀 タスク実行開始")
    print("DISPLAY: " + os.environ.get("DISPLAY", "未設定"))
    
    # DISPLAY設定確認
    if not os.environ.get("DISPLAY"):
        os.environ["DISPLAY"] = ":1"
        print("⚠️  DISPLAYを:1に設定しました")
    
    result = asyncio.run(run_uzbekistan_ma_task())
    
    if result:
        print("\n" + "="*70)
        print("🎊 タスク完了！")
        print("="*70)
        print("\n次のステップ:")
        print("  1. agent_outputs/design/uzbekistan_ma_portal_structure.md を確認")
        print("  2. 内容をレビュー")
        print("  3. 必要に応じて修正・追加タスクを実行")
    else:
        print("\n" + "="*70)
        print("⚠️  タスクが完了しませんでした")
        print("="*70)
        print("\nトラブルシューティング:")
        print("  1. VNCで画面確認: http://localhost:6080/vnc.html")
        print("  2. ログイン状態を確認")
        print("  3. スクリーンショット確認: debug_gemini_page.png")

