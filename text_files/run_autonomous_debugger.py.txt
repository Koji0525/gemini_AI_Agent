# run_autonomous_debugger.py
import asyncio
import logging
import argparse
from pathlib import Path

from config_utils import config, ErrorHandler
from sheets_manager import GoogleSheetsManager
from browser_controller import BrowserController
from autonomous_debugger import AutonomousDebugger

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def main():
    parser = argparse.ArgumentParser(description='自律デバッグエージェント')
    parser.add_argument('--command', type=str, required=True, help='デバッグするコマンド')
    parser.add_argument('--files', type=str, nargs='+', required=True, help='修正対象ファイル')
    parser.add_argument('--pc-id', type=int, default=1, help='PC_ID')
    parser.add_argument('--max-attempts', type=int, default=5, help='最大試行回数')
    
    args = parser.parse_args()
    
    print("=== 自律デバッグエージェント起動 ===")
    
    # 初期化
    sheets_manager = GoogleSheetsManager(config.SPREADSHEET_ID)
    browser = BrowserController(Path("."), mode='text', service='google')
    
    await browser.setup_browser()
    await browser.navigate_to_gemini()
    
    # ログイン処理（必要に応じて）
    credentials = sheets_manager.load_credentials_from_sheet(args.pc_id)
    browser.credentials = credentials
    
    # 自律デバッガー起動
    debugger = AutonomousDebugger(
        browser_controller=browser,
        sheets_manager=sheets_manager,
        max_attempts=args.max_attempts
    )
    
    try:
        # デバッグ実行
        result = await debugger.debug_until_success(args.command, args.files)
        
        # 結果表示
        print("\n" + "=" * 50)
        print("デバッグ結果")
        print("=" * 50)
        print(f"成功: {result['success']}")
        print(f"試行回数: {result['attempts']}")
        
        if result['success']:
            print("🎉 すべてのエラーが解決しました！")
        else:
            print("❌ デバッグが完了しませんでした")
            print(debugger.generate_debug_report())
        
    except Exception as e:
        logger.error(f"デバッグエージェントエラー: {e}")
    finally:
        await browser.cleanup()

if __name__ == "__main__":
    asyncio.run(main())