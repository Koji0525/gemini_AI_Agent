# task_executor.py の先頭に以下を追加

# === 既存のインポート文の下に追加 ===
from task_executor_content import ContentTaskExecutor
from task_executor_ma import MATaskExecutor

# === TaskExecutor クラスの __init__ メソッド内に追加 ===
# （既存の _initialize_agents() の後に追加）

def __init__(self, sheets_manager: GoogleSheetsManager, browser_controller=None, max_iterations: int = None):
    # ... 既存のコード ...
    
    # エージェントを自動初期化
    self._initialize_agents()
    
    # === ここから追加 ===
    # 記事生成専用エグゼキューター
    self.content_executor = ContentTaskExecutor(self.agents)
    
    # M&A専用エグゼキューター
    self.ma_executor = MATaskExecutor(self.agents)
    
    logger.info("分離モジュール初期化完了: ContentTaskExecutor, MATaskExecutor")
    # === ここまで追加 ===


# === _execute_writer_task メソッドを置き換え ===
# 既存の _execute_writer_task メソッドを以下に置き換える

async def _execute_writer_task(self, task: Dict, role: str) -> Dict:
    """言語別ライタータスクを実行（ContentTaskExecutorに委譲）"""
    return await self.content_executor.execute_writer_task(task, role)


# === perform_review_and_add_tasks メソッド内を修正 ===
# display_suggested_tasks の呼び出しを以下に変更

async def perform_review_and_add_tasks(self, task: Dict, result: Dict):
    """タスク完了後のレビューと追加タスク生成"""
    try:
        # ... 既存のコード ...
        
        if suggested_tasks:
            print(f"\n提案タスク: {len(suggested_tasks)}件")
            
            # 拡張された選択肢を提供
            while True:
                choice = input("\n提案タスクをどうしますか?\n"
                             "(y)追加 / (n)スキップ / (v)確認 / (e)編集 / (m)手動入力 / (c)キャンセル: ").lower()
                
                if choice == 'y':
                    # ... 既存のコード ...
                    break
                
                elif choice == 'n':
                    # ... 既存のコード ...
                    break
                
                elif choice == 'v':
                    # === この行を変更 ===
                    self.content_executor.display_suggested_tasks(suggested_tasks)
                    continue
                
                elif choice == 'e':
                    # === この行を変更 ===
                    edited_tasks = await self.content_executor.edit_suggested_tasks(suggested_tasks)
                    if edited_tasks:
                        # ... 既存のコード ...
                    continue
                
                elif choice == 'm':
                    # === この行を変更 ===
                    manual_tasks = await self.content_executor.create_manual_tasks()
                    if manual_tasks:
                        # ... 既存のコード ...
                    continue
                
                elif choice == 'c':
                    # ... 既存のコード ...
                    break
                
                else:
                    # ... 既存のコード ...
                    continue
        
        # ... 既存のコード（残りの部分）...
    
    except Exception as e:
        ErrorHandler.log_error(e, "レビューとタスク追加")


# === _execute_wordpress_task メソッド内に追加 ===
# M&A関連タスクの判定を追加

async def _execute_wordpress_task(self, task: Dict) -> Dict:
    """WordPressタスクを実行"""
    logger.info("┌" + "─"*58 + "┐")
    logger.info("│ 🌐 WordPress AIエージェント実行中")
    logger.info("├" + "─"*58 + "┤")
    logger.info(f"│ アクション: {task.get('post_action', 'N/A')}")
    logger.info(f"│ 言語: {task.get('language', 'N/A')}")
    logger.info(f"│ Polylang: {task.get('polylang_lang', 'N/A')}")
    logger.info("└" + "─"*58 + "┘")
    
    try:
        # === ここから追加: M&A関連タスクの判定 ===
        description = task['description'].lower()
        
        # M&A関連キーワードをチェック
        ma_keywords = [
            'custom post type', 'カスタム投稿タイプ',
            'acf', 'カスタムフィールド',
            'taxonomy', 'タクソノミー',
            'm&a案件', 'ma_case',
            '企業検索', '案件管理'
        ]
        
        is_ma_task = any(keyword in description for keyword in ma_keywords)
        
        if is_ma_task:
            logger.info("📊 M&A関連タスクとして実行")
            return await self.ma_executor.execute_ma_task(task)
        # === ここまで追加 ===
        
        # パラメータのデフォルト設定（既存コード）
        if 'post_action' not in task:
            task['post_action'] = 'edit'
        if 'polylang_lang' not in task:
            task['polylang_lang'] = 'ja'
        
        # ... 既存のコード（残りの部分）...
        
    except Exception as e:
        ErrorHandler.log_error(e, "WordPressタスク実行")
        logger.error(f"❌ WordPress AIエージェント: 例外発生 - {str(e)}")
        return {
            'success': False,
            'error': f'WordPressタスク実行エラー: {str(e)}'
        }


# === 既存の _display_suggested_tasks, _edit_suggested_tasks, _create_manual_tasks メソッドを削除 ===
# これらのメソッドは task_executor_content.py に移動したため、
# task_executor.py からは削除してOK