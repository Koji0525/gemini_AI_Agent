# task_executor.py の修正部分（execute_taskメソッドに追加）
```python
# task_executor.py の execute_task メソッド内に追加

async def execute_task(self, task: Dict) -> bool:
    """単一タスクを実行（WordPress専用エージェント対応版）"""
    task_id = task.get('task_id', 'UNKNOWN')
    
    try:
        # === タスク開始ヘッダー ===
        print("\n" + "📷"*40)
        print("=" * 80)
        print(f"🎯 タスク開始: {task_id}")
        print("=" * 80)
        print(f"📝 内容: {task['description'][:70]}...")
        print(f"👤 担当エージェント: {task['required_role'].upper()}")
        
        # ... タスクタイプ判定の既存コード ...
        
        print("=" * 80)
        print("📷"*40 + "\n")
        
        logger.info(f"タスク {task_id} 実行開始")
        
        # タスクのステータスを'in_progress'に更新
        try:
            await self.update_task_status(task, 'in_progress')
        except Exception as e:
            logger.warning(f"⚠️ ステータス更新失敗（続行）: {e}")
        
        # 担当AIエージェントを取得
        role = task['required_role'].lower()
        
        # === タスクタイムアウト設定 ===
        timeout_map = {
            'ma': 300.0,
            'content': 240.0,
            'review': 180.0,
            'wordpress': 300.0,
            'wp_design': 300.0,  # WordPress設計
            'wp_dev': 300.0,     # WordPress開発
            'default': 180.0
        }
        
        # タスクタイプを取得
        task_type = 'default'
        if HAS_TASK_ROUTER and task_router:
            try:
                task_type = task_router.determine_task_type(task)
                logger.info(f"📊 タスクタイプ判定: {task_type}")
            except Exception as e:
                logger.warning(f"⚠️ タスクタイプ判定失敗、デフォルト処理: {e}")
        
        task_timeout = timeout_map.get(task_type, timeout_map.get(role, 180.0))
        
        # === タスク実行（タイムアウト付き） ===
        result = None
        
        try:
            # WordPress専用エージェントの判定を最優先
            if role == 'wp_design':
                logger.info("="*60)
                logger.info("🎨 WordPress設計AIエージェント実行中")
                logger.info("="*60)
                task_coro = self._execute_wp_design_task(task)
            
            elif role == 'wp_dev':
                logger.info("="*60)
                logger.info("💻 WordPress開発AIエージェント実行中")
                logger.info("="*60)
                task_coro = self._execute_wp_dev_task(task)
            
            # タスクタイプベースの分岐
            elif task_type == 'ma' and self.ma_executor:
                logger.info("="*60)
                logger.info("📊 M&A/企業検索タスクとして処理")
                logger.info("="*60)
                task_coro = self.ma_executor.execute_ma_task(task)
            
            elif task_type == 'content' and self.content_executor:
                logger.info("="*60)
                logger.info("✏️ 記事生成タスクとして処理")
                logger.info("="*60)
                task_coro = self.content_executor.execute_writer_task(task, role)
            
            elif task_type == 'review':
                logger.info("="*60)
                logger.info("✅ レビュータスクとして処理")
                logger.info("="*60)
                task_coro = self._execute_review_task(task)
            
            # デフォルトのロール分岐
            else:
                logger.info("="*60)
                logger.info(f"📋 デフォルトタスク ({role}) として処理")
                logger.info("="*60)
                
                if role == 'design':
                    task_coro = self._execute_design_task(task)
                elif role == 'dev':
                    task_coro = self._execute_dev_task(task)
                elif role == 'ui':
                    task_coro = self._execute_ui_task(task)
                elif role == 'wordpress':
                    task_coro = self._execute_wordpress_task(task)
                elif role == 'plugin':
                    task_coro = self._execute_plugin_task(task)
                else:
                    # 未登録エージェント
                    agent = self.agents.get(role)
                    if not agent:
                        logger.warning(f"担当エージェント '{role}' が見つかりません - スキップします")
                        await self.update_task_status(task, 'skipped', error=f"エージェント未登録")
                        return False
                    task_coro = agent.process_task(task)
            
            # タイムアウト付きで実行
            if HAS_ENHANCED_HANDLER:
                result = await EnhancedErrorHandler.timeout_wrapper(
                    task_coro,
                    timeout=task_timeout,
                    context=f"タスク {task_id} 実行"
                )
            else:
                result = await asyncio.wait_for(task_coro, timeout=task_timeout)
        
        except asyncio.TimeoutError:
            logger.error("="*60)
            logger.error(f"⏱️ タスク {task_id} タイムアウト（{task_timeout}秒）")
            logger.error("="*60)
            
            await self.update_task_status(
                task, 
                'failed', 
                error=f'タイムアウト（{task_timeout}秒）'
            )
            
            print("\n" + "📷"*40)
            print("=" * 80)
            print(f"⏱️ タスクタイムアウト: {task_id}")
            print(f"制限時間: {task_timeout}秒")
            print("=" * 80)
            print("📷"*40 + "\n")
            
            return False
        
        except Exception as e:
            logger.error("="*60)
            logger.error(f"❌ タスク {task_id} 実行中に例外発生")
            logger.error(f"エラー: {str(e)}")
            logger.error("="*60)
            
            if HAS_ENHANCED_HANDLER:
                EnhancedErrorHandler.log_error_with_context(
                    e, 
                    f"タスク {task_id} 実行"
                )
            
            await self.update_task_status(task, 'failed', error=str(e))
            
            print("\n" + "📷"*40)
            print("=" * 80)
            print(f"💥 タスク例外: {task_id}")
            print(f"例外: {str(e)}")
            print("=" * 80)
            print("📷"*40 + "\n")
            
            return False
        
        # === 実行結果の処理 ===
        if result and result.get('success'):
            logger.info("="*60)
            logger.info(f"✅ タスク {task_id} 実行成功")
            logger.info("="*60)
            
            try:
                await self.update_task_status(task, 'completed')
                await self.save_task_output(task, result)
            except Exception as e:
                logger.warning(f"⚠️ 結果保存失敗（タスク自体は成功）: {e}")
            
            # レビューAIでレビュー
            if self.review_agent and role != 'review' and task_type != 'review':
                try:
                    logger.info("="*60)
                    logger.info("✅ レビューAIでチェックを開始")
                    logger.info("="*60)
                    
                    if HAS_ENHANCED_HANDLER:
                        await EnhancedErrorHandler.timeout_wrapper(
                            self.perform_review_and_add_tasks(task, result),
                            timeout=120.0,
                            context=f"レビュー（タスク {task_id}）"
                        )
                    else:
                        await asyncio.wait_for(
                            self.perform_review_and_add_tasks(task, result),
                            timeout=120.0
                        )
                except Exception as e:
                    logger.warning(f"⚠️ レビュー失敗（無視）: {e}")
            
            print("\n" + "📷"*40)
            print("=" * 80)
            print(f"✅ タスク完了: {task_id}")
            print(f"タイプ: {task_type.upper()}")
            print(f"ステータス: 成功")
            print("=" * 80)
            print("📷"*40 + "\n")
            
            return True
        else:
            error_msg = result.get('error', '不明') if result else '結果なし'
            logger.error("="*60)
            logger.error(f"❌ タスク {task_id} 実行失敗")
            logger.error(f"エラー: {error_msg}")
            logger.error("="*60)
            
            await self.update_task_status(task, 'failed', error=error_msg)
            
            print("\n" + "📷"*40)
            print("=" * 80)
            print(f"❌ タスク失敗: {task_id}")
            print(f"タイプ: {task_type.upper()}")
            print(f"エラー: {error_msg}")
            print("=" * 80)
            print("📷"*40 + "\n")
            
            return False
    
    except Exception as e:
        logger.error(f"❌ タスク {task_id} 処理全体で予期しないエラー")
        
        if HAS_ENHANCED_HANDLER:
            EnhancedErrorHandler.log_error_with_context(
                e, 
                f"タスク {task_id} 全体処理"
            )
        else:
            ErrorHandler.log_error(e, f"タスク {task_id} 実行")
        
        try:
            await self.update_task_status(task, 'failed', error=str(e))
        except:
            pass
        
        print("\n" + "📷"*40)
        print("=" * 80)
        print(f"💥 タスク重大エラー: {task_id}")
        print(f"例外: {str(e)}")
        print("=" * 80)
        print("📷"*40 + "\n")
        
        return False

async def _execute_wp_design_task(self, task: Dict) -> Dict:
    """WordPress設計タスクを実行"""
    logger.info("┌" + "─"*58 + "┐")
    logger.info("│ 🎨 WordPress設計AIエージェント実行中")
    logger.info("├" + "─"*58 + "┤")
    logger.info(f"│ タスク: {task.get('description', 'N/A')[:50]}")
    logger.info("└" + "─"*58 + "┘")
    
    try:
        agent = self.agents.get('wp_design')
        if not agent:
            logger.error("❌ WordPress設計AIエージェントが登録されていません")
            return {
                'success': False,
                'error': 'wp_design エージェントが登録されていません'
            }

        result = await agent.process_task(task)
        
        if result.get('success'):
            logger.info("✅ WordPress設計AI: タスク完了")
        else:
            logger.error(f"❌ WordPress設計AI: 失敗 - {result.get('error', '不明')}")
        
        return result
        
    except Exception as e:
        ErrorHandler.log_error(e, "WordPress設計タスク実行")
        logger.error(f"❌ WordPress設計AIエージェント: 例外発生 - {str(e)}")
        return {
            'success': False,
            'error': f'WordPress設計タスク実行エラー: {str(e)}'
        }

async def _execute_wp_dev_task(self, task: Dict) -> Dict:
    """WordPress開発タスクを実行"""
    logger.info("┌" + "─"*58 + "┐")
    logger.info("│ 💻 WordPress開発AIエージェント実行中")
    logger.info("├" + "─"*58 + "┤")
    logger.info(f"│ タスク: {task.get('description', 'N/A')[:50]}")
    logger.info("└" + "─"*58 + "┘")
    
    try:
        agent = self.agents.get('wp_dev')
        if not agent:
            logger.error("❌ WordPress開発AIエージェントが登録されていません")
            return {
                'success': False,
                'error': 'wp_dev エージェントが登録されていません'
            }
        
        result = await agent.process_task(task)
        
        if result.get('success'):
            logger.info("✅ WordPress開発AI: タスク完了")
        else:
            logger.error(f"❌ WordPress開発AI: 失敗 - {result.get('error', '不明')}")
        
        return result
        
    except Exception as e:
        ErrorHandler.log_error(e, "WordPress開発タスク実行")
        logger.error(f"❌ WordPress開発AIエージェント: 例外発生 - {str(e)}")
        return {
            'success': False,
            'error': f'WordPress開発タスク実行エラー: {str(e)}'
        }