"""WordPress認証・ログイン管理"""
import logging
from datetime import datetime
from typing import Dict, Optional
from playwright.async_api import Page

logger = logging.getLogger(__name__)


class WordPressAuth:
    """WordPress認証管理"""
    
    def __init__(self, wp_url: str, wp_user: str, wp_pass: str):
        self.wp_url = wp_url
        self.wp_user = wp_user
        self.wp_pass = wp_pass
    
    async def login(self, page: Page) -> bool:
        """WordPressにログイン"""
        try:
            logger.info("="*60)
            logger.info("WordPress: ログイン開始")
            logger.info(f"URL: {self.wp_url}")
            logger.info("="*60)
            
            # ログインページに移動
            login_url = f"{self.wp_url}/wp-login.php"
            await page.goto(login_url, timeout=30000)
            await page.wait_for_timeout(2000)
            
            # ユーザー名入力
            await page.fill('#user_login', self.wp_user)
            await page.wait_for_timeout(500)
            
            # パスワード入力
            await page.fill('#user_pass', self.wp_pass)
            await page.wait_for_timeout(500)
            
            # ログインボタンをクリック
            await page.click('#wp-submit')
            await page.wait_for_timeout(3000)
            
            # ログイン成功確認
            current_url = page.url
            if 'wp-admin' in current_url:
                logger.info("✅ WordPressログイン成功")
                
                # スクリーンショット保存
                screenshot_path = f"wp_logged_in_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                await page.screenshot(path=screenshot_path)
                logger.info(f"📸 ログイン画面: {screenshot_path}")
                
                return True
            else:
                logger.error("❌ WordPressログイン失敗")
                await page.screenshot(path="wp_login_failed.png")
                return False
                
        except Exception as e:
            logger.error(f"❌ ログインエラー: {e}")
            return False